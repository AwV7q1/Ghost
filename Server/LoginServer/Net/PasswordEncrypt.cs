using System;

namespace Server.Net
{
    public class PasswordEncrypt
    {
        private char[] result = new char[14];
        private int resultPosition = 0;
        private int ps;

        public PasswordEncrypt(int ps)
        {
            this.ps = ps;
        }

        public string encrypt(string password)
        {
            int position = 0;
            int encryptResult = 0;
            int length = password.Length;
            char[] passwordArray = password.ToCharArray();
            Array.Reverse(passwordArray);
            char[] passwordReverse = new char[256];
            passwordArray.CopyTo(passwordReverse, 256 - length);
            if (length > 0)
            {
                do
                {
                    int data = passwordReverse[255 - position] | passwordReverse[254 - position] << 8 | passwordReverse[253 - position] << 16 | passwordReverse[252 - position] << 24;
                    encryptResult = encrypt(ps + data, 1);
                    encrypt2((uint)encryptResult);
                    position += 4;
                    resultPosition += 7;
                } while (position < length);
            }
            return new string(result);
        }

        private int encrypt(int data, int mode)
        {
            byte[] key = {
                0x1A, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x11, 0x00,
                0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
                0x10, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00,
                0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x1C, 0x00,
                0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
                0x04, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x17, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
                0x0E, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x06, 0x00,
                0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
                0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x19, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x12, 0x00,
                0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
                0x19, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x1F, 0x00,
                0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00,
                0x09, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x03, 0x00,
                0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
                0x0E, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x0B, 0x00,
                0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x17, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00,
                0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
                0x11, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1E, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
                0x0C, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0x01, 0x00, 0x00, 0x00 };
            int result = 0;
            int v6 = 0;
            if (data != 0)
            {
                int position = 0;
                do
                {
                    int v5 = data - (int)((long)data & 0xFFFFFFFE);
                    data = data >> 1;
                    if (v5 != 0)
                    {
                        if (mode != 0)
                        {
                            v6 = key[position];
                        }
                        else {
                            v6 = key[position];
                        }
                        result = result + (v5 << v6);
                    }
                    position += 4;
                } while (data != 0);
            }
            return result;
        }


        private void encrypt2(uint a1)
        {
            uint v2, temp, temp2, temp3;
            char[] table = new char[36];
            "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".CopyTo(0, table, 0, 36);
            result[0 + resultPosition] = table[a1 % 0x24];
            v2 = a1 / 0x24 / 0x24;
            result[1 + resultPosition] = table[a1 / 0x24 % 0x24];
            temp = v2;
            v2 /= 0x24;
            result[2 + resultPosition] = table[temp - 36 * v2];
            temp2 = v2;
            v2 /= 0x24;
            result[3 + resultPosition] = table[temp2 - 36 * v2];
            temp3 = v2;
            v2 /= 0x24;
            result[4 + resultPosition] = table[temp3 - 36 * v2];
            result[5 + resultPosition] = table[v2 % 0x24];
            result[6 + resultPosition] = table[v2 / 0x24 % 0x24];
        }
    }
}
