using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Server.Net
{
    public class PasswordEncrypt
    {
        private char[] a2 = new char[256];
        private int a4 = 0;
        private int ps;

        public PasswordEncrypt(int ps)
        {
            this.ps = ps;
        }

        public string encrypt(string pass)
        {
            int v2 = 0;
            int v5 = 0;
            int value = 0;
            int length = pass.Length;
            char[] passwordArray = pass.ToCharArray();
            if (length > 0)
            {
                do
                {
                    v5 = encrypt1(ps + (int)(passwordArray[value]), 1);
                    encrypt2(v5);
                    v2 += 4;
                    a4 += 7;
                    value += 1;
                } while (v2 < length);
            }
            string resault = "";
            foreach (char aa in a2)
            {
                resault += aa.ToString();
            }
            return resault;
        }

        private int encrypt1(int a1, int a2)
        {
            byte[] key = {
                0x1A, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x11, 0x00,
                0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
                0x10, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00,
                0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x1C, 0x00,
                0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
                0x04, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x17, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
                0x0E, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x06, 0x00,
                0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
                0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x07, 0x00,
                0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x19, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x12, 0x00,
                0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
                0x19, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x1F, 0x00,
                0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00,
                0x09, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x03, 0x00,
                0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
                0x0E, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x0B, 0x00,
                0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x17, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00,
                0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
                0x11, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1E, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
                0x0C, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0x01, 0x00, 0x00, 0x00 };
            int result = 0;
            int v6 = 0;
            if (a1 != 0)
            {
                int v4 = 0;
                do
                {
                    int v5 = a1 - (int)((long)a1 & 0xFFFFFFFE);
                    a1 = a1 >> 1;
                    if (v5 != 0)
                    {
                        if (a2 != 0)
                        {
                            v6 = key[v4];
                        }
                        else {
                            v6 = key[v4];
                        }
                        result = result + (v5 << v6);
                    }
                    v4 += 4;
                } while (a1 != 0);
            }
            return result;
        }


        private void encrypt2(int a1)
        {
            int v2, v3, v4, v5;
            char[] v7 = new char[36];
            "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".CopyTo(0, v7, 0, 36);
            a2[0 + a4] = v7[a1 % 0x24];
            v2 = a1 / 0x24 / 0x24;
            a2[1 + a4] = v7[a1 / 0x24 % 0x24];
            v3 = v2;
            v2 /= 0x24;
            a2[2 + a4] = v7[v3 - 36 * v2];
            v4 = v2;
            v2 /= 0x24;
            a2[3 + a4] = v7[v4 - 36 * v2];
            v5 = v2;
            v2 /= 0x24;
            a2[4 + a4] = v7[v5 - 36 * v2];
            a2[5 + a4] = v7[v2 % 0x24];
            a2[6 + a4] = v7[v2 / 0x24 % 0x24];
        }
    }
}
